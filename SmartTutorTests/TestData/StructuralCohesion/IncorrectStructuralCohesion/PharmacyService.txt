using System;
using System.Collections.Generic;

namespace Classes.Structural
{
public class PharmacyService
    {
        public List<Purchase> Purchases { get; set; }
        public List<Pharmacist> Pharmacists { get; set; }

        internal Purchase GetMostExpensiveGranulePurchaseInPharmacyForPharmacists(List<int> pharmacistIds)
        {
            // Get only pharmacists from this pharmacy.
            List<Pharmacist> pharmacists = new List<Pharmacist>();
            foreach (var pharmacist in Pharmacists)
            {
                foreach (var pharmacistId in pharmacistIds)
                {
                    if (pharmacist.Id == pharmacistId)
                    {
                        pharmacists.Add(pharmacist);
                    }
                }
            }

            // Get all purchases from pharmacists.
            List<Purchase> purchases = new List<Purchase>();
            foreach (var purchase in Purchases)
            {
                foreach (var pharmacist in pharmacists)
                {
                    if (pharmacist == purchase.Pharmacist)
                    {
                        purchases.Add(purchase);
                    }
                }
            }

            // Get only purchases where bought pill is in granule form.
            List<Purchase> granulePurchases = new List<Purchase>();
            foreach (var purchase in purchases)
            {
                foreach (var purchasedPill in purchase.PurchasedPills)
                {
                    if (purchasedPill.Form == PillForm.Granule)
                    {
                        granulePurchases.Add(purchase);
                    }
                }
            }

            // Get most expensive purchase.
            double maxGranulePurchaseCost = 0;
            Purchase mostExpensiveGranulePurchase = null;
            foreach (var granulePurchase in granulePurchases)
            {
                if (granulePurchase.Cost > maxGranulePurchaseCost)
                {
                    maxGranulePurchaseCost = granulePurchase.Cost;
                    mostExpensiveGranulePurchase = granulePurchase;
                }
            }

            return mostExpensiveGranulePurchase;
        }
    }
}